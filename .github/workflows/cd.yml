name: CD
on:
  push:
    branches:
      - main

jobs:
  affected:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache node_modules
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - uses: actions/setup-node@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          node-version: 14.x

      - name: yarn install
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --pure-lockfile

      - uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: "main"

      - id: set-matrix
        run: |
          echo "::set-output name=matrix::$(./affected-apps.sh)"

      - name: Affected infras
        run: echo ${{ steps.set-matrix.outputs.matrix }}

  build:
    needs: [affected]
    runs-on: ubuntu-latest
    if: needs.affected.outputs.matrix != '[]'
    strategy:
      matrix:
        app: ${{ fromJson(needs.affected.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v2

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - id: buildx
        uses: docker/setup-buildx-action@v1

      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ matrix.app }}-${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ matrix.app }}-${{ runner.os }}-buildx-

      - id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./build/Dockerfile.${{ matrix.app }}
          push: true
          tags: ${{ secrets.ECR_DOMAIN }}/gimi-${{ matrix.app }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Log out of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Image digest
        run: |
          echo ${{ secrets.ECR_DOMAIN }}/gimi-${{ matrix.app }}:${{ github.sha }} && \
          echo ${{ steps.docker_build.outputs.digest }}
